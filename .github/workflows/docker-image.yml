name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PWD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ secrets.DOCKER_USER }}/bada:latest
          ${{ secrets.DOCKER_USER }}/bada:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=registry,ref=${{ secrets.DOCKER_USER }}/bada:cache
        cache-to: type=inline

    - name: Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USER }}/bada:latest

    - name: Image digest
      run: echo "Image digest is ${{ steps.docker_build.outputs.digest }}"

  run-docker-image-on-ec2:
    # build-docker-image 과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKER_USER }}/bada-py

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop bada-py-server

      - name: Create .env file
        run: echo "${{ secrets.BADA_PY_ENV }}" > ~/bada-py/.env

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name bada-py-server --rm -d -p 8000:8000 --env-file ~/bada-py/.env ${{ secrets.DOCKER_USER }}/bada-py

      # # 4. 미사용 이미지를 정리합니다
      # - name: delete old docker image
      #   run: sudo docker system prune -f
